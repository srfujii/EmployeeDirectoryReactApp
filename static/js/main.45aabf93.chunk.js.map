{"version":3,"sources":["utils/API.js","components/ResultList.js","components/SearchForm.js","components/EmpDir.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","ResultList","props","htmlProps","results","map","employee","className","src","picture","large","alt","name","first","last","phone","email","moment","dob","date","format","onClick","handleSort","classList","SearchForm","onChange","handleInputChange","value","search","type","placeholder","id","size","EmployeeContainer","state","toggle","searchEmployees","API","then","res","setState","data","catch","err","console","log","searchEmployeeResults","query","searchResultsArray","filter","includes","event","target","sort","a","b","handleFormSubmit","preventDefault","this","Component","App","EmpDir","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45aabf93.chunk.js","sourcesContent":["import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us&inc=name,email,dob,phone,picture&noinfo\";\n// const APIKEY = \"&apikey=trilogy\";\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n    //  + query + APIKEY);\n  }\n};","import React from \"react\";\nimport moment from \"moment\";\nimport \"../App.css\";\n\nfunction ResultList(props) {\n\n    const htmlProps = props.results.map(employee => (\n        <div key={employee.phone} className=\"row row-cols-5 mb-3\">\n            <div className=\"col\"><img src={employee.picture.large}  alt={employee.name.first + \" \" + employee.name.last} /></div>\n            <div className=\"col\">{employee.name.first + \" \" + employee.name.last}</div>\n            <div className=\"col\">{employee.phone}</div>\n            <div className=\"col\">{employee.email}</div>\n            <div className=\"col\">{moment(employee.dob.date).format(\"MMM D, YYYY\")}</div>\n        </div>\n    ));\n\n    return (\n        <>\n        <div className=\"container\">\n            <div className=\"row row-cols-5 mb-3 mt-3 font-weight-bold\">\n                <div className=\"col text-center\">Image</div>\n                <div className=\"col text-center sortable\" onClick={props.handleSort}>Name <span classList=\"large\">â–¾</span></div>\n                <div className=\"col text-center\">Phone</div>\n                <div className=\"col text-center\">Email</div>\n                <div className=\"col text-center\">DOB</div>\n            </div>\n        {htmlProps}\n        </div>\n        </>\n    );\n}\n\nexport default ResultList;\n","import React from \"react\";\nimport \"../App.css\";\n\nfunction SearchForm(props) {\n  return (\n    <form className=\"mt-3\">\n      <div className=\"form-group\">\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for Employee by Name\"\n          id=\"search\"\n          size=\"30\"\n        />\n        {/* <button onClick={props.handleFormSubmit} className=\"btn btn-primary ml-3 mt-3\">\n          Search\n        </button> */}\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport ResultList from \"./ResultList\";\nimport SearchForm from \"./SearchForm\";\n\nclass EmployeeContainer extends Component {\n    state = {\n        results: [],\n        search: \"\",\n        toggle: 1\n    };\n\n    // When this component mounts, search for employees\n    componentDidMount() {\n        this.searchEmployees();\n    }\n\n    searchEmployees = () => {\n        API.search()\n            .then(res => {\n                this.setState({ results: res.data.results });\n            })\n            .catch(err => console.log(err));\n    };\n\n    searchEmployeeResults = (query) => {\n        console.log(\"Query String: \", query);\n        console.log(\"Results: \", this.state.results);\n\n        const searchResultsArray = this.state.results.filter(employee => (\n            ((employee.name.first.includes(query)) ||\n                (employee.name.last.includes(query)))\n        ));\n        this.setState({ results: searchResultsArray });\n    };\n\n    handleInputChange = event => {\n        const value = event.target.value;\n\n        console.log(\"Value: \", value);\n\n        const searchResultsArray = this.state.results.filter(employee => (\n            ((employee.name.first.includes(value)) ||\n                (employee.name.last.includes(value)))\n        ));\n\n        this.setState({\n            search: value,\n            results: searchResultsArray\n        });\n    };\n\n    handleSort = event => {\n        \n        if (this.state.toggle === 1) {\n            this.setState({\n                results: this.state.results.sort((a, b) =>\n                    (a.name.first > b.name.first) \n                    ? 1 \n                    : (a.name.first === b.name.first)\n                    ?\n                    ((a.name.last > b.name.last) \n                    ? 1 \n                    : -1) \n                    : -1),\n\n                toggle: -1    \n            });\n        } else {\n            this.setState({\n                results: this.state.results.sort((a, b) =>\n                    (a.name.first < b.name.first) \n                    ? 1 \n                    : (a.name.first === b.name.first)\n                    ?\n                    ((a.name.last < b.name.last) \n                    ? 1 \n                    : -1) \n                    : -1),\n\n                toggle: 1    \n            });\n        }\n    };\n\n    // When the form is submitted, search the Giphy API for `this.state.search`\n    handleFormSubmit = event => {\n        event.preventDefault();\n        this.searchEmployeeResults(this.state.search);\n    };\n\n    render() {\n        return (\n            <>\n                <SearchForm\n                    search={this.state.search}\n                    handleFormSubmit={this.handleFormSubmit}\n                    handleInputChange={this.handleInputChange}\n                />\n                <ResultList \n                    results={this.state.results}\n                    handleSort={this.handleSort}\n                />\n            </>\n        )\n    }\n}\n\nexport default EmployeeContainer;","import './App.css';\nimport EmpDir from \"./components/EmpDir.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Employee Directory</h1>\n        <p>Click on the \"Name\" column to sort employees by name, or use the search box:</p>\n      </header>\n      <EmpDir />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}